
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users Collection Rules
    match /users/{userId} {
      // Users can read their own document, admins can read any user document.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Only the user can create their own document (on signup).
      allow create: if request.auth != null && request.auth.uid == userId;
      // Only the user can update their own document.
      allow update: if request.auth != null && request.auth.uid == userId;
      // Users cannot delete their own accounts directly through the client.
      allow delete: if false;
    }

    // Events Collection Rules
    match /events/{eventId} {
      // Anyone can read events.
      allow read: if true;
      // Only admins can create, update, or delete events.
      allow write: if request.auth != null && isAdmin();
    }

    // Registrations Collection Rules (Placeholder for now)
    // This will need to be updated when payments and full registration flow is built.
    match /registrations/{registrationId} {
        allow read, write: if request.auth != null; // Simplistic rule for now
    }
  }
}
